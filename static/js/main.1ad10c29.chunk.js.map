{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Plot","createPlotlyComponent","Plotly","App","data","setData","useState","dx","dy","time","options","setOptions","alpha","beta","gamma","delta","start_X","start_Y","splitOptions","LodkaValterraFunc","_ref","x","y","useEffect","payload","i","push","_objectSpread","_jsxs","className","children","_jsx","Object","keys","map","param","style","minWidth","Slider","value","onChange","prev","min","max","toFixed","type","mode","marker","color","name","layout","width","height","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ad10c29.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport './App.css';\r\nimport Plotly from \"plotly.js\";\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\n\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nfunction App() {\r\n  const [data, setData] = useState({ dx: [], dy: [], time: [] });\r\n  const [options, setOptions] = useState({\r\n    alpha: 0.1,\r\n    beta: 0.002,\r\n    gamma: 0.2,\r\n    delta: 0.0025,\r\n    start_X: 80,\r\n    start_Y: 20,\r\n    time: 100,\r\n  });\r\n\r\n  const splitOptions = {\r\n    alpha: 100,\r\n    beta: 10000,\r\n    gamma: 100,\r\n    delta: 10000,\r\n    start_X: 1,\r\n    start_Y: 1,\r\n    time: 1,\r\n  };\r\n\r\n  const LodkaValterraFunc = ({ x, y, alpha, beta, gamma, delta }) => {\r\n    const dx_dt = (alpha - beta * y) * x;\r\n    const dy_dt = (-gamma + delta * x) * y;\r\n    return [dx_dt, dy_dt];\r\n  };\r\n\r\n  useEffect(() => {\r\n    const payload = { dx: [], dy: [], time: [] };\r\n    let x = options.start_X;\r\n    let y = options.start_Y;\r\n\r\n    for (let i = 0; i < options.time; i++) {\r\n      payload.dx.push(x);\r\n      payload.dy.push(y);\r\n      payload.time.push(i);\r\n      const [dx, dy] = LodkaValterraFunc({ x, y, ...options });\r\n      x += dx;\r\n      y += dy;\r\n    }\r\n    setData(payload);\r\n  }, [options]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"title\">\r\n        <h1>Модель Лотки-Вольтерры</h1>\r\n        <div className=\"btns\">\r\n          {Object.keys(options).map((param) => (\r\n            <div className=\"btns_item\" key={param}>\r\n              <div style={{ minWidth: '60px' }}>{param}:</div>\r\n              <Slider\r\n                value={options[param] * splitOptions[param]}\r\n                onChange={(data) => {\r\n                  setOptions(prev => ({ ...prev, [param]: data / splitOptions[param] }));\r\n                }}\r\n                min={param === 'time' ? 10 : 0}\r\n                max={param === 'time' ? 200 : 100}\r\n              />\r\n              <div style={{ minWidth: '60px' }}>{options[param].toFixed(3)}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"desc\">\r\n          Соколов П. ИВТ 3 курс\r\n        </div>\r\n      </div>\r\n      <div className=\"graphics\">\r\n        <div className=\"plot-container\">\r\n          <Plot\r\n            data={[\r\n              {\r\n                x: data.time,\r\n                y: data.dx,\r\n                type: 'scatter',\r\n                mode: 'lines',\r\n                marker: { color: 'blue' },\r\n                name: \"Популяция жертв\"\r\n              },\r\n              {\r\n                x: data.time,\r\n                y: data.dy,\r\n                type: 'scatter',\r\n                mode: 'lines',\r\n                marker: { color: 'red' },\r\n                name: \"Популяция хищников\"\r\n              },\r\n            ]}\r\n            layout={{ width: 600, height: 400, title: 'График зависимости популяций друг от друга.' }}\r\n          />\r\n        </div>\r\n        <div className=\"plot-container\">\r\n          <Plot\r\n            data={[\r\n              {\r\n                x: data.dx,\r\n                y: data.dy,\r\n                type: 'scatter',\r\n                mode: 'lines',\r\n                marker: { color: 'purple' },\r\n                name: \"Фазовый портрет\"\r\n              },\r\n            ]}\r\n            layout={{ width: 600, height: 400, title: 'Фазовый портрет.' }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}